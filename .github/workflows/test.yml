name: Unit Tests

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt

    - name: Lint with flake8 (optional)
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

    - name: Run lightweight unit tests (no ML dependencies)
      run: |
        # Run tests that don't require heavy ML models or complex mocking
        python -m pytest tests/test_lightweight.py tests/test_note_parser.py tests/test_context_formatter.py -v --tb=short
      
    - name: Run query engine tests (lightweight)  
      run: |
        # Test query engine logic without actual vector operations
        python -c "
        from query_engine import QueryEngine
        from unittest.mock import Mock
        
        # Test basic initialization
        mock_store = Mock()
        engine = QueryEngine(mock_store)
        print('Query engine initialization: PASSED')
        
        # Test stats method
        mock_store.get_collection_info.return_value = {'count': 0, 'name': 'test', 'persist_directory': '/tmp'}
        stats = engine.get_stats()
        assert 'total_notes' in stats
        print('Query engine stats: PASSED')
        "

    - name: Run unit tests with coverage
      run: |
        pip install coverage
        coverage run -m pytest tests/test_lightweight.py tests/test_note_parser.py tests/test_context_formatter.py
        coverage report -m
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Test CLI functionality
      run: |
        # Test basic CLI commands (without actual embedding models to save time)
        python notes_app.py --help
        # Create a minimal test to ensure imports work
        python -c "from note_parser import NoteParser; print('Note parser import: PASSED')"
        python -c "from context_formatter import ContextFormatter; print('Context formatter import: PASSED')"
        # Test that basic parsing works without models
        python -c "
        from note_parser import NoteParser
        import tempfile
        from pathlib import Path
        
        temp_dir = Path(tempfile.mkdtemp())
        test_file = temp_dir / 'test.md'
        test_file.write_text('# Test Title\nTest content', encoding='utf-8')
        
        parser = NoteParser(str(temp_dir))
        notes = parser.parse_notes()
        assert len(notes) == 1
        assert notes[0]['title'] == 'Test Title'
        print('Note parsing logic: PASSED')
        "

  test-integration:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install full dependencies for integration test
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run integration test with timeout
      timeout-minutes: 10
      run: |
        # Test the full workflow with sample data (with timeout to prevent hanging)
        echo "Testing CLI help command..."
        python notes_app.py --help
        
        echo "Testing indexing..."
        python notes_app.py index || echo "Index failed - this is expected if models can't download"
        
        echo "Testing stats command..."
        python notes_app.py stats || echo "Stats failed - this is expected if no index exists"
        
        echo "Integration test completed (some failures expected in CI environment)"